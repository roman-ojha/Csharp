using System;

namespace Methods
{
    /*
        *) Methods:
            -> A method is a code block that contains a series of statements. A program causes the statements to be executed by calling the method and specifying any required method arguments. In C#, every executed instruction is performed in the context of a method.
            -> The Main method is the entry point for every C# application and it's called by the common language runtime (CLR) when the program is started. In an application that uses top-level statements, the Main method is generated by the compiler and contains all top-level statements.
            -> Methods are declared in a class, struct, or interface by specifying the access level such as public or private, optional modifiers such as abstract or sealed, the return value, the name of the method, and any method parameters. These parts together are the signature of the method.
        
        *) Method signatures
            -> Methods are declared in a class, record, or struct by specifying:
                *> An optional access level, such as public or private. The default is private.
                *> Optional modifiers such as abstract or sealed.
                *> The return value, or void if the method has none.
                *> The method name.
                *> Any method parameters. Method parameters are enclosed in parentheses and are separated by commas. Empty parentheses indicate that the method requires no parameters.
    */
    class Person
    {
        public string? Name
        {
            get;
            set;
        }
        public string Talk()
        {
            return "Hello " + Name;
        }
    }

    // The following example defines a class named Motorcycle that contains five methods:
    abstract class Motorcycle
    {
        // Anyone can call this.
        public void StartEngine() {/* Method statements here */ }

        // Only derived classes can call this.
        protected void AddGas(int gallons) { /* Method statements here */ }

        // Derived classes can override the base class implementation.
        public virtual int Drive(int miles, int speed) { /* Method statements here */ return 1; }

        // Derived classes can override the base class implementation.
        public virtual int Drive(TimeSpan time, int speed) { /* Method statements here */ return 0; }

        // Derived classes must implement this.
        public abstract double GetTopSpeed();
    }

    class Prog
    {

        static public void Run(string[] args)
        {
            Person person = new Person();
            person.Name = "roman";
            Console.Write(person.Talk());
        }
    }
}